name: API

on:
  pull_request:
    paths:
      - '.github/workflows/backend.yml'
      - 'backend/api/**'

    branches:
      - '*'

  push:
    paths:
      - '.github/workflows/backend.yml'
      - 'backend/api/**'

    branches:
      - 'develop'
      - 'master'

jobs:
  build:
    if: github.repository == 'JOWOMO/project-c'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Use Node.js 12.x
      uses: actions/setup-node@v1.4.4
      with:
        node-version: 12.x

    - name: Install dependencies
      run: |
        npm install
      working-directory: backend/api

    - name: Install poetry
      run: |
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

    - name: Set env default
      run: |
        echo "STAGE=dev" >> $GITHUB_ENV

    - name: Set env to test
      if: endsWith(github.ref, '/develop')
      run: |
        echo "STAGE=test" >> $GITHUB_ENV

    - name: Set env to production
      if: endsWith(github.ref, '/master')
      run: |
        echo "STAGE=prod" >> $GITHUB_ENV

    - name: Deploy to stage
      run: |
        source $HOME/.poetry/env

        poetry env use python3.7
        poetry config --local virtualenvs.in-project true
        poetry install

        source .venv/bin/activate
        python3 -m btb.templates

        npx serverless deploy --stage ${{ env.STAGE }}
      working-directory: backend/api
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - uses: tkt-actions/aws-sam-cli@v1

    - name: Cleanup database
      if: contains(github.event.pull_request.labels.*.name, 'db:clean')
      run: |
        aws lambda invoke --function-name bee-to-bee-api-${{ env.STAGE }}-dbupdate --cli-read-timeout 0 --payload '{"action": "clean"}' response.json > output.txt

        echo "RESPONSE"
        cat response.json

        echo "\nOUTPUT"
        cat output.txt

        if grep -q FunctionError output.txt; then
          exit 1;
        fi

      working-directory: backend/api
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "eu-west-1"

    - name: Run database update
      run: |
        aws lambda invoke --function-name bee-to-bee-api-${{ env.STAGE }}-dbupdate --cli-read-timeout 0 --payload '{}' response.json > output.txt

        echo "RESPONSE"
        cat response.json

        echo "\nOUTPUT"
        cat output.txt

        if grep -q FunctionError output.txt; then
          exit 1;
        fi

      working-directory: backend/api
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "eu-west-1"

    - name: Import test-data
      if: contains(github.event.pull_request.labels.*.name, 'db:data')
      run: |
        aws lambda invoke --function-name bee-to-bee-api-${{ env.STAGE }}-dbupdate --cli-read-timeout 0 --payload '{"action": "test-data"}' response.json > output.txt

        echo "RESPONSE"
        cat response.json

        echo "\nOUTPUT"
        cat output.txt

        if grep -q FunctionError output.txt; then
          exit 1;
        fi

      working-directory: backend/api
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "eu-west-1"

